FullStack DotNet + React
[Section 2] .NET Web API Basic
dotnet new sln
dotnet new webapi -o API
dotnet sln add API/
dotnet run

Visual studio code extension list
C# แล้วตั้ง extension setting เป็น Enable import Completion
C# extension by JosKreativ
Material Icon Theme
nuget gallery - ใช้สำหรับ install package 
SQLite 

สร้างไฟล์ asset ให้กับ project
Ctrl + Shift + P 
-> .NET: Generate Assets for build and debug

สิ่งที่มาใหม่ใน .NET 6
- hot reload
- minimal host file
- global using
- nullable
- namespace declare

dotnet watch run - nodemon index 
auto reload ให้เมื่อมีการเปลี่ยนแปลงในโค้ด

Startup.cs
ConfigureServices (.NET 5)
คือ dependency injection container ใช้สำหรับ  inject service ให้คลาส (Controller เป็นต้น) สามารถใช้งาน Service ได้
Configure (.NET 5)
คือ ใช้ในการ config middleware ในระหว่างที่ http request รับเข้ามา จะมี  pipeline โดยแต่ละจุดใน pipeline ก็จะผ่าน middleware ที่เราเขียนไว้ เช่น Authentication Authorization

Controller
Atrribute [Route("[controller]")] ด้วย placholder โดย [controller] จะนำชื่อของ classที่ตัดcontroller มาแมพเป็น endpoint ของ api

Entity Framework
เป็น ORM ใช้ระหว่าง class ของ .NET กับ Table ใน Database ใช้ได้แค่กับ RDMS (Relation Database) เท่านั้น 
โดยจะมี Gateway คือ dbContext แล้ว dbSet ที่เป็นเหมือนตัวแทน Table ใน database ที่ใช้สำหรับ manipulate database 
ใช้งานผ่าน linq function * property ของ class ต้องเป็น public
Entity Framework Features
- Modelling class เพื่อแมพกับ table
- Querying 
- Change Tracking
- Saving
- Concurrency
- Transactions จัดการ transaction ได้  commit, rollback on error
- Caching ทำการ caching data ได้ หากมีการเข้าถึงข้อมูลเดิมบ่อย ๆ
- Built-in conventions
- Configurations
- Migrations (code first approach)

Ctrl + Shift + P ->  Nuget package 
- Microsoft.EntityFrameworkCore.SQLite
- Microsoft.EntityFrameworkCore.Design (เพื่อใช้งาน Migrations)

Folder Data 
ไว้ใช้เก็บ data เช่น  DBContext class

Dependency Injection แบบกำหนด  parameter ของ contructor ที่จะ initialize ในทุก ๆ  การ inject
services.AddDbContext<StoreContext>(option =>
{
    option.UseSqlite(Configuration.GetConnectionString("DefaultConnection"));
});

dotnet ef command
dotnet tool install --global dotnet-ef --version 6.0.5
https://www.nuget.org/packages/dotnet-ef/

Start Using Migrations
dotnet ef migrations add InitialCreate -o Data/Migrations สร้าง migration ไฟล์เพื่อดู generated sql
dotnet ef database update นำ migration ที่สร้างไป execute กับ database

เปิด SQLite 
Ctrl + Shift + P ->  Open Database

dotnet new gitignore เพื่อ add gitignore

dotnet ef database drop command ใช้สำหรับ drop database

[Section 3] React Basic (Library)
npx create-react-app client --template typescript --use-npm
สร้าง react app โดยใช้ typescript template และใช้ npm เป็น packgage manager หลัก
หากเจอปัญหา  ("You are running `create-react-app` 4.0.3, which is behind the latest release (5.0.0)") ให้ clear npx cache โดย command npx clear-npx-cache

useState hook 
setState with prevState
 setProducts((prevState) => [
      ...prevState,
      {
        name: "product" + (prevState.length + 1),
        price: prevState.length * 100 + 100,
      },
]);

CORS (Cross origin resource sharing)
เกิดจากการ request จาก domain ที่เป็นคนละ domain กับ API Server
ในการอนุญาตให้ CORS ได้ให้ทำดังนี้
1. Add CORS Service อยู่ที่ไหนใน ConfigureService ก็ได้ Order ไม่สำคัญ
services.AddCors(); 
2. Add CORS Middleware Order การวางสำคัญ ต้องใส่หลัง app.UseRouting();
 app.UseCors(options =>
{
    options.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:3000"); 
    //อนุญาตทุก header ทุก http request method(GET,POST,PUT,DELETE) ที่อยู่ใน Origin http://localhost:3000 ใน Production อาจมีการตั้ง config ที่ appSetting.json
});

http://json2ts.com/ web generate typescript interface from json data

export interface Product{
    id: number;
    name: string;
    description: string;
    price: number;
    pictureUrl: string;
    brand: string;
    type?: string; // optional
    quantityInStock?: number; // optional
}


รับ props แบบ typescript

interface CatalogProps {
  products: Product[];
  addProduct: () => void;
}

const Catalog = ({ products, addProduct }: CatalogProps) => { return ();}

[Section 4] React Router (Routing)
npm install react-router-dom @types/react-router-dom
use to navigate between page

การใช้งาน React Router
import BrowserRouter และ นำไป Wrapper App Component 
<BrowserRouter>
  <App />
</BrowserRouter>

ประกาศ Path ต่าง ๆ ของ web application 
<Routes>
  <Route path="/" element={<HomePage />} />
  <Route path="catalog" element={<Catalog />} />
  <Route path="catalog/:id" element={<ProductDetails />} />
  <Route path="about" element={<AboutPage />} />
  <Route path="contact" element={<ContactPage />} />
</Routes>

หากต้องการ navigate ไปหน้าต่าง ๆ สามารถทำได้โดยใช้ 
Link Component 
<Link to={"/"} >Home</Link>
หรือ useNavigate() hook

เข้าถึง parameter ของ path ได้ด้วย useParams โดย variable name ต้องตรงกัน
const { id } = useParams<{ id: string }>();

[Section 5] Error Handling 
npm install react-router-dom @types/react-router-dom
เราจำเป็นต้องเขียนเพื่อรองรับสถานกานณ์ที่ไม่คาดคิด เช่น bug, exception, not validate เป็นต้น
โดย net core นั้นมีการรองรับ return status code พื้นฐานอยู่แล้วเช่น 404, 500 แต่ถ้าเป็นเรื่อง exception เราต้องทำ exceptionMiddleware เอง ไม่งั้นจะได้รับ response message ที่ไม่มีประโยชน์ต่อ client
โดยทุก ๆ middleware นั้นจะต้องมี Invoke method ซึ่งชื่อ Invoke method ต้องเป็น InvokeAsync เท่านั้น

สร้าง custom axios เพื่อการแยกโค้ด ให้ใช้งานง่ายมากขึ้น และ export agent ออกไป
สร้างหน้า Loading เพื่อรองรับการเรียก API 
สร้างหน้า NotFound ในกรณีที่หา route ไม่เจอ
แปลง custom axios ให้ request ไป BuggyController เพื่อทดสอบรับ error response ที่ไม่ปกติ (400 - 500)
แสดง toast error ในกรณีที่เกิด error

debug on .NET CORE โดยการใช้ .NET Core Attach on running application
และใช้ .Net Core Lauch debug เมื่อต้องการ debug ต้อง start up ของ application

[Section 6] Add Basket function 
ตะกร้าสินค้า 
ef framework 
เราสามารถสร้าง class ได้หลายแบบ เช่น
one to many relation 
โดยสร้าง property ของฝั่ง one ด้วย Collection 
เช่น public List<BasketItem> BasketItems 
และสร้าง property ของฝั่ง many ด้วย foreign key property และ foreign object property
public int BasketId {get;set;}
public Basket Basket {get;set;}

one to one relation โดยการสร้าง property 2 ตัวคือ 
1. foreign key property
public int ProductId {get;set;}
2. foreign object property 
public Product Product {get;set;}

dotnet ef migrations add BasketEntityAdded ---> add migration command
dotnet ef migrations remove ---> remove all migrations that not yet applied to the project
revert migration 
ref : https://stackoverflow.com/questions/38192450/how-to-unapply-a-migration-in-asp-net-core-with-ef-core

สามารถกำหนดชื่อของ table ที่จะอยู่ใน database ได้ด้วย [Table("tableName")] attribute

api with query string
api/basket?productId=2&quantity=5
คือการสร้าง action โดยที่ไม่มีการกำหนด variable ที่ตัว end point 
แต่ยังสามารถดึงแปรมาจาก end point ได้
[HttpPost]
public async Task<ActionResult> AddItemToBasket(int productId, int quantity)

เป็น ActionResult ที่ return create or update data กลับไปให้ client โดย actionRoute คือ endpoint ที่ใช้ดึงค่าของ data 
CreateAtRouted(actionRoute, returnValue)

app.UseCors(options =>
            {
                options.AllowAnyHeader().AllowAnyMethod().AllowCredentials().WithOrigins("http://localhost:3000");
            });
AllowCredentials = อนุญาตให้ส่ง cookie ได้ระหว่าง domain
HttpOnly Option = true ทำให้ javascript และ typescript เข้าถึง cookie ไม่ได้

set axios ให้สามารถรับส่ง cookie ได้
axios.defaults.withCredentials = true;

convert json to ts interface 
http://json2ts.com/

Context child Component สามารถเข้าถึง state ได้โดยไม่ต้อง chain pass property