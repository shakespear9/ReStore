FullStack DotNet + React
[Section 2] .NET Web API Basic
dotnet new sln
dotnet new webapi -o API
dotnet sln add API/
dotnet run

Visual studio code extension list
C# แล้วตั้ง extension setting เป็น Enable import Completion
C# extension by JosKreativ
Material Icon Theme
nuget gallery - ใช้สำหรับ install package 
SQLite 

สร้างไฟล์ asset ให้กับ project
Ctrl + Shift + P 
-> .NET: Generate Assets for build and debug

สิ่งที่มาใหม่ใน .NET 6
- hot reload
- minimal host file
- global using
- nullable
- namespace declare

dotnet watch run - nodemon index 
auto reload ให้เมื่อมีการเปลี่ยนแปลงในโค้ด

Startup.cs
ConfigureServices (.NET 5)
คือ dependency injection container ใช้สำหรับ  inject service ให้คลาส (Controller เป็นต้น) สามารถใช้งาน Service ได้
Configure (.NET 5)
คือ ใช้ในการ config middleware ในระหว่างที่ http request รับเข้ามา จะมี  pipeline โดยแต่ละจุดใน pipeline ก็จะผ่าน middleware ที่เราเขียนไว้ เช่น Authentication Authorization

Controller
Atrribute [Route("[controller]")] ด้วย placholder โดย [controller] จะนำชื่อของ classที่ตัดcontroller มาแมพเป็น endpoint ของ api

Entity Framework
เป็น ORM ใช้ระหว่าง class ของ .NET กับ Table ใน Database ใช้ได้แค่กับ RDMS (Relation Database) เท่านั้น 
โดยจะมี Gateway คือ dbContext แล้ว dbSet ที่เป็นเหมือนตัวแทน Table ใน database ที่ใช้สำหรับ manipulate database 
ใช้งานผ่าน linq function * property ของ class ต้องเป็น public
Entity Framework Features
- Modelling class เพื่อแมพกับ table
- Querying 
- Change Tracking
- Saving
- Concurrency
- Transactions จัดการ transaction ได้  commit, rollback on error
- Caching ทำการ caching data ได้ หากมีการเข้าถึงข้อมูลเดิมบ่อย ๆ
- Built-in conventions
- Configurations
- Migrations (code first approach)

Ctrl + Shift + P ->  Nuget package 
- Microsoft.EntityFrameworkCore.SQLite
- Microsoft.EntityFrameworkCore.Design (เพื่อใช้งาน Migrations)

Folder Data 
ไว้ใช้เก็บ data เช่น  DBContext class

Dependency Injection แบบกำหนด  parameter ของ contructor ที่จะ initialize ในทุก ๆ  การ inject
services.AddDbContext<StoreContext>(option =>
{
    option.UseSqlite(Configuration.GetConnectionString("DefaultConnection"));
});

dotnet ef command
dotnet tool install --global dotnet-ef --version 6.0.5
https://www.nuget.org/packages/dotnet-ef/

Start Using Migrations
dotnet ef migrations add InitialCreate -o Data/Migrations สร้าง migration ไฟล์เพื่อดู generated sql
dotnet ef database update นำ migration ที่สร้างไป execute กับ database

เปิด SQLite 
Ctrl + Shift + P ->  Open Database

dotnet new gitignore เพื่อ add gitignore

dotnet ef database drop command ใช้สำหรับ drop database

[Section 3] React Basic (Library)
npx create-react-app client --template typescript --use-npm
สร้าง react app โดยใช้ typescript template และใช้ npm เป็น packgage manager หลัก
หากเจอปัญหา  ("You are running `create-react-app` 4.0.3, which is behind the latest release (5.0.0)") ให้ clear npx cache โดย command npx clear-npx-cache

useState hook 
setState with prevState
 setProducts((prevState) => [
      ...prevState,
      {
        name: "product" + (prevState.length + 1),
        price: prevState.length * 100 + 100,
      },
]);

CORS (Cross origin resource sharing)
เกิดจากการ request จาก domain ที่เป็นคนละ domain กับ API Server
ในการอนุญาตให้ CORS ได้ให้ทำดังนี้
1. Add CORS Service อยู่ที่ไหนใน ConfigureService ก็ได้ Order ไม่สำคัญ
services.AddCors(); 
2. Add CORS Middleware Order การวางสำคัญ ต้องใส่หลัง app.UseRouting();
 app.UseCors(options =>
{
    options.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:3000"); 
    //อนุญาตทุก header ทุก http request method(GET,POST,PUT,DELETE) ที่อยู่ใน Origin http://localhost:3000 ใน Production อาจมีการตั้ง config ที่ appSetting.json
});

http://json2ts.com/ web generate typescript interface from json data

export interface Product{
    id: number;
    name: string;
    description: string;
    price: number;
    pictureUrl: string;
    brand: string;
    type?: string; // optional
    quantityInStock?: number; // optional
}


รับ props แบบ typescript

interface CatalogProps {
  products: Product[];
  addProduct: () => void;
}

const Catalog = ({ products, addProduct }: CatalogProps) => { return ();}

React Router
npm install react-router-dom @types/react-router-dom
use to navigate